(SETQ GRAPH '((A B 32) (A C 95) (A D 75) (A E 57)
                         (B C 5) (B E 23) (B H 16)
                         (C D 18) (C F 6)
                         (D E 24) (D F 9)
                         (E G 20) (E H 94)
                         (F E 11) (F G 7)
                         (G H 81)))

(DEFUN FUN1 (G V LST)
        (COND ((NULL G) LST)
              ((EQ (CAR G) V)(APPEND LST (CONS (CADR G) NIL)))
              (T LST)))

(DEFUN ADG_NODES (G V LST) 
              (COND
               ((NULL G) LST)
               ((NULL V) LST)
               (T (ADG_NODES (CDR G) V (FUN1 (CAR G) V LST)))))

(DEFUN DELL (LST1 LST2)
      (COND ((NULL LST1) LST2)
            ((NULL LST2) LST2)
            (T (DELL (CDR LST1)(DELETE (CAR LST1)LST2)))))

(DEFUN NEW_ADG (G S QUEUE VISITED ADG)
	(COND (T 
	(DELL VISITED (DELL QUEUE (ADG_NODES G S ADG))))))

(DEFUN NEW_QUEUE (G S QUEUE VISITED ADG)
	(APPEND (DELETE S QUEUE) (NEW_ADG G S QUEUE VISITED ADG)))

(DEFUN NEW_ARC (A B)
	(CONS (CONS A (CONS B NIL)) NIL))

(DEFUN RES_ARC (V NODES RES)
	(COND ((NULL NODES) RES)
		((NULL V) RES)
		(T (RES_ARC V (CDR NODES) (APPEND RES (NEW_ARC V (CAR NODES)))))))

(SETQ Q (CONS (CAAR GRAPH) NIL))
(SETQ V()) 
(SETQ ADG ())  
(SETQ RES ())

(DEFUN BFS (G S QUEUE VISITED ADG GOAL RES)
	(COND 
	    ((NULL QUEUE) NIL)
	    (T (COND
			((MEMBER GOAL (NEW_ADG G S QUEUE VISITED ADG)) (APPEND RES (NEW_ARC S GOAL)))
			(T (BFS G (CAR QUEUE) (NEW_QUEUE G S QUEUE VISITED ADG) (CONS S VISITED) ADG GOAL (RES_ARC S (NEW_ADG G S QUEUE VISITED ADG) RES)))))))	

(DEFUN MEMBER1 (A B LST)
            (COND ((NULL LST) NIL)
                  ((EQ A (CAAR LST))(COND 
						((EQ B (CADAR LST)) LST)
						(T (MEMBER1 A B (CDR LST)))))
                     (T (MEMBER1 A B (CDR LST)))))

(DEFUN WAY (S G LST RES)
  (COND ((NULL LST) RES) 
	   ((MEMBER1 S G LST) (CONS S (APPEND (CONS G NIL) RES)))
	   (T (COND
		((EQ (CADAR LST) G) (WAY S (CAAR LST) (CDR LST) (CONS G RES)))
           (T (WAY S G (CDR LST) RES))))))

(SETQ RES_WAY ())
(DEFUN LST_WAY (S F G RES_WAY) 
	(WAY S F (REVERSE (BFS GRAPH S Q V ADG F RES)) RES_WAY))

